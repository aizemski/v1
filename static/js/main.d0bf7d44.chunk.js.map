{"version":3,"sources":["shared/img/iconmonstr-instagram-11.svg","shared/img/iconmonstr-github-1.svg","shared/img/iconmonstr-linkedin-1.svg","shared/components/layout/Header/index.js","shared/components/layout/Content/index.js","shared/components/layout/Footer/index.js","components/Work/index.js","components/Experience/index.js","components/Contact/index.js","components/About/index.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","Row","Content","props","Container","children","Footer","className","xs","Col","md","href","Image","src","GithubLogo","LinkedinLogo","InstagramLogo","Work","Experience","Contact","About","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,qD,gBCA3CD,EAAOC,QAAU,IAA0B,iD,gBCA3CD,EAAOC,QAAU,IAA0B,mD,+ICM5BC,EAHA,WACX,OAAO,kBAACC,EAAA,EAAD,uC,QCCIC,EAHC,SAACC,GACb,OAAO,kBAACC,EAAA,EAAD,KAAYD,EAAME,W,kEC6BdC,EA1BA,WACX,OACI,kBAACF,EAAA,EAAD,KACI,kBAACH,EAAA,EAAD,CAAKM,UAAU,4BAA4BC,GAAG,KAC1C,kBAACC,EAAA,EAAD,CAAKC,GAAG,QACJ,uBAAGC,KAAK,+BACJ,kBAACC,EAAA,EAAD,CAAOC,IAAKC,QAGpB,kBAACL,EAAA,EAAD,CAAKC,GAAG,QACJ,uBAAGC,KAAK,yCACJ,kBAACC,EAAA,EAAD,CAAOC,IAAKE,QAGpB,kBAACN,EAAA,EAAD,CAAKC,GAAG,QACJ,uBAAGC,KAAK,uCACJ,kBAACC,EAAA,EAAD,CAAOC,IAAKG,SAIxB,kBAACf,EAAA,EAAD,CAAKM,UAAU,4BAA4BC,GAAG,KAC1C,kBAACC,EAAA,EAAD,uDCrBDQ,EAHF,WACT,OAAO,kBAAChB,EAAA,EAAD,cCEIiB,EAHI,WACf,OAAO,kBAACjB,EAAA,EAAD,oBCEIkB,EAHC,WACZ,OAAO,kBAAClB,EAAA,EAAD,iBCEImB,EAHD,WACV,OAAO,kBAACnB,EAAA,EAAD,eCoBIoB,MAff,WACI,OACI,oCACI,kBAAC,EAAD,MACA,kBAAC,EAAD,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEJ,kBAAC,EAAD,QCPNC,EAAcC,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DAsCZ,SAASC,EAAgBC,EAAOC,GAC5BC,UAAUC,cACLC,SAASJ,GACTK,MAAK,SAACC,GACHA,EAAaC,cAAgB,WACzB,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACE,cAA3BF,EAAiBG,QACbT,UAAUC,cAAcS,YAIxBC,QAAQC,IACJ,iHAKAb,GAAUA,EAAOc,UACjBd,EAAOc,SAAST,KAMpBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACjBf,EAAOe,UAAUV,WAOxCW,OAAM,SAACC,GACJL,QAAQK,MAAM,4CAA6CA,MC1FvEC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,cDYrB,SAAkBtB,GACrB,GAA6C,kBAAmBC,UAAW,CAGvE,GADkB,IAAIsB,IAAIC,MAAwB9B,OAAOC,SAASd,MACpD4C,SAAW/B,OAAOC,SAAS8B,OAIrC,OAGJ/B,OAAOgC,iBAAiB,QAAQ,WAC5B,IAAM3B,EAAK,UAAMyB,MAAN,sBAEPhC,IAgEhB,SAAiCO,EAAOC,GAEpC2B,MAAM5B,EAAO,CACT6B,QAAS,CAAE,iBAAkB,YAE5BxB,MAAK,SAACyB,GAEH,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEjB,MAApBF,EAASG,QACO,MAAfF,IAC0C,IAAvCA,EAAYG,QAAQ,cAGxBhC,UAAUC,cAAcgC,MAAM9B,MAAK,SAACC,GAChCA,EAAa8B,aAAa/B,MAAK,WAC3BV,OAAOC,SAASyC,eAKxBtC,EAAgBC,EAAOC,MAG9BgB,OAAM,WACHJ,QAAQC,IACJ,oEAxFAwB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,MAAK,WAC/BQ,QAAQC,IACJ,iHAMRf,EAAgBC,EAAOC,OClCvCE,K","file":"static/js/main.d0bf7d44.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/iconmonstr-instagram-11.341a67c5.svg\";","module.exports = __webpack_public_path__ + \"static/media/iconmonstr-github-1.1bb02710.svg\";","module.exports = __webpack_public_path__ + \"static/media/iconmonstr-linkedin-1.97ce31c8.svg\";","import React from 'react';\r\nimport { Row } from 'react-bootstrap';\r\n\r\nconst Header = () => {\r\n    return <Row>About Experience Work Contact</Row>;\r\n};\r\nexport default Header;\r\n","import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nconst Content = (props) => {\r\n    return <Container>{props.children}</Container>;\r\n};\r\nexport default Content;\r\n","import React from 'react';\r\nimport { Row, Image, Col, Container } from 'react-bootstrap';\r\nimport InstagramLogo from '../../../img/iconmonstr-instagram-11.svg';\r\nimport GithubLogo from '../../../img/iconmonstr-github-1.svg';\r\nimport LinkedinLogo from '../../../img/iconmonstr-linkedin-1.svg';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <Container>\r\n            <Row className='justify-content-md-center' xs='3'>\r\n                <Col md='auto'>\r\n                    <a href='https://github.com/aizemski'>\r\n                        <Image src={GithubLogo} />\r\n                    </a>\r\n                </Col>\r\n                <Col md='auto'>\r\n                    <a href='https://www.linkedin.com/in/aizemski/'>\r\n                        <Image src={LinkedinLogo} />\r\n                    </a>\r\n                </Col>\r\n                <Col md='auto'>\r\n                    <a href='https://www.instagram.com/aizemski/'>\r\n                        <Image src={InstagramLogo} />\r\n                    </a>\r\n                </Col>\r\n            </Row>\r\n            <Row className='justify-content-md-center' xs='3'>\r\n                <Col> ©&nbsp;Aleksander&nbsp;Iżemski&nbsp;2020</Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\nexport default Footer;\r\n","import React from 'react';\r\nimport { Row } from 'react-bootstrap';\r\n\r\nconst Work = () => {\r\n    return <Row>Work</Row>;\r\n};\r\nexport default Work;\r\n","import React from 'react';\r\nimport { Row } from 'react-bootstrap';\r\n\r\nconst Experience = () => {\r\n    return <Row>Experience</Row>;\r\n};\r\nexport default Experience;\r\n","import React from 'react';\r\nimport { Row } from 'react-bootstrap';\r\n\r\nconst Contact = () => {\r\n    return <Row>Contact</Row>;\r\n};\r\nexport default Contact;\r\n","import React from 'react';\r\nimport { Row } from 'react-bootstrap';\r\n\r\nconst About = () => {\r\n    return <Row>About</Row>;\r\n};\r\nexport default About;\r\n","import React from 'react';\nimport Header from '../shared/components/layout/Header';\nimport Content from '../shared/components/layout/Content';\nimport Footer from '../shared/components/layout/Footer';\nimport Work from './Work';\nimport Experience from './Experience';\nimport Contact from './Contact';\nimport About from './About';\n\nfunction App() {\n    return (\n        <>\n            <Header />\n            <Content>\n                <About />\n                <Work />\n                <Experience />\n                <Contact />\n            </Content>\n            <Footer />\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './shared/css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('container')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}